{"ast":null,"code":"import { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport detectEthereumProvider from '@metamask/detect-provider'; // Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\n\nconst INFURA_ID = \"\";\nconst NETWORK_NAME = \"rinkeby\"; //\"mainnet\";\n\nfunction useWeb3Modal() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [provider, setProvider] = useState();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const {\n    autoLoad = true,\n    infuraId = INFURA_ID,\n    NETWORK = NETWORK_NAME\n  } = config; // Web3Modal also supports many other wallets.\n\n  const web3Modal = new Web3Modal({\n    network: NETWORK,\n    cacheProvider: true,\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId\n        }\n      }\n    }\n  }); //installMetamask();\n\n  /*function installMetamask() {\n    if (!(window.web3 || window.ethereum)) {\n      if ($('#installMetaMask').length < 1)\n        $('.web3modal-modal-card').prepend('<div id=\"installMetaMask\" class=\"cjAFRf web3modal-provider-wrapper\"><a href=\"https://metamask.io/\" target=\"_blank\" class=\"cjAFRf web3modal-provider-container\"><div class=\"jMhaxE web3modal-provider-icon\"><img src=\"./assets/img/metamask.svg\" alt=\"MetaMask\"></div><div class=\"bktcUM sc-web3modal-provider-name mt-0\">Install MetaMask</div><div class=\"eFHlqH web3modal-provider-description\">Connect using browser wallet</div></a></div>')\n    }\n  }*/\n  // Open wallet selection modal.\n\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n  const logoutOfWeb3Modal = useCallback(async function () {\n    await web3Modal.clearCachedProvider();\n    window.location.reload();\n  }, [web3Modal]); // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [autoLoad, autoLoaded, loadWeb3Modal, setAutoLoaded, web3Modal.cachedProvider]);\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;","map":{"version":3,"names":["useCallback","useEffect","useState","Web3Provider","Web3Modal","WalletConnectProvider","detectEthereumProvider","INFURA_ID","NETWORK_NAME","useWeb3Modal","config","provider","setProvider","autoLoaded","setAutoLoaded","autoLoad","infuraId","NETWORK","web3Modal","network","cacheProvider","providerOptions","walletconnect","package","options","loadWeb3Modal","newProvider","connect","logoutOfWeb3Modal","clearCachedProvider","window","location","reload","cachedProvider"],"sources":["/Library/WebServer/Documents/MachineLearning/trading/PKT-CASH/LUX/ODApp/packages/react-app/src/hooks/useWeb3Modal.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport detectEthereumProvider from '@metamask/detect-provider';\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"\";\n\nconst NETWORK_NAME = \"rinkeby\";//\"mainnet\";\n\nfunction useWeb3Modal(config = {}) {\n  const [provider, setProvider] = useState();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const { autoLoad = true, infuraId = INFURA_ID, NETWORK = NETWORK_NAME } = config;\n\n  // Web3Modal also supports many other wallets.\n  const web3Modal = new Web3Modal({\n    network: NETWORK,\n    cacheProvider: true,\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId,\n        },\n      }\n    },\n  });\n\n  //installMetamask();\n\n  /*function installMetamask() {\n    if (!(window.web3 || window.ethereum)) {\n      if ($('#installMetaMask').length < 1)\n        $('.web3modal-modal-card').prepend('<div id=\"installMetaMask\" class=\"cjAFRf web3modal-provider-wrapper\"><a href=\"https://metamask.io/\" target=\"_blank\" class=\"cjAFRf web3modal-provider-container\"><div class=\"jMhaxE web3modal-provider-icon\"><img src=\"./assets/img/metamask.svg\" alt=\"MetaMask\"></div><div class=\"bktcUM sc-web3modal-provider-name mt-0\">Install MetaMask</div><div class=\"eFHlqH web3modal-provider-description\">Connect using browser wallet</div></a></div>')\n    }\n  }*/\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n\n  const logoutOfWeb3Modal = useCallback(\n    async function () {\n      await web3Modal.clearCachedProvider();\n      window.location.reload();\n    },\n    [web3Modal],\n  );\n\n  // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [autoLoad, autoLoaded, loadWeb3Modal, setAutoLoaded, web3Modal.cachedProvider]);\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;AACA,OAAOC,sBAAP,MAAmC,2BAAnC,C,CAEA;AACA;;AACA,MAAMC,SAAS,GAAG,EAAlB;AAEA,MAAMC,YAAY,GAAG,SAArB,C,CAA+B;;AAE/B,SAASC,YAAT,GAAmC;EAAA,IAAbC,MAAa,uEAAJ,EAAI;EACjC,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,EAAxC;EACA,MAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM;IAAEa,QAAQ,GAAG,IAAb;IAAmBC,QAAQ,GAAGT,SAA9B;IAAyCU,OAAO,GAAGT;EAAnD,IAAoEE,MAA1E,CAHiC,CAKjC;;EACA,MAAMQ,SAAS,GAAG,IAAId,SAAJ,CAAc;IAC9Be,OAAO,EAAEF,OADqB;IAE9BG,aAAa,EAAE,IAFe;IAG9BC,eAAe,EAAE;MACfC,aAAa,EAAE;QACbC,OAAO,EAAElB,qBADI;QAEbmB,OAAO,EAAE;UACPR;QADO;MAFI;IADA;EAHa,CAAd,CAAlB,CANiC,CAmBjC;;EAEA;AACF;AACA;AACA;AACA;AACA;EAEE;;EACA,MAAMS,aAAa,GAAGzB,WAAW,CAAC,YAAY;IAC5C,MAAM0B,WAAW,GAAG,MAAMR,SAAS,CAACS,OAAV,EAA1B;IACAf,WAAW,CAAC,IAAIT,YAAJ,CAAiBuB,WAAjB,CAAD,CAAX;EACD,CAHgC,EAG9B,CAACR,SAAD,CAH8B,CAAjC;EAKA,MAAMU,iBAAiB,GAAG5B,WAAW,CACnC,kBAAkB;IAChB,MAAMkB,SAAS,CAACW,mBAAV,EAAN;IACAC,MAAM,CAACC,QAAP,CAAgBC,MAAhB;EACD,CAJkC,EAKnC,CAACd,SAAD,CALmC,CAArC,CAlCiC,CA0CjC;;EACAjB,SAAS,CAAC,MAAM;IACd,IAAIc,QAAQ,IAAI,CAACF,UAAb,IAA2BK,SAAS,CAACe,cAAzC,EAAyD;MACvDR,aAAa;MACbX,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CALQ,EAKN,CAACC,QAAD,EAAWF,UAAX,EAAuBY,aAAvB,EAAsCX,aAAtC,EAAqDI,SAAS,CAACe,cAA/D,CALM,CAAT;EAOA,OAAO,CAACtB,QAAD,EAAWc,aAAX,EAA0BG,iBAA1B,CAAP;AACD;;AAED,eAAenB,YAAf"},"metadata":{},"sourceType":"module"}