{"ast":null,"code":"import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    var _a, _b;\n\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.renderPromises) === null || _b === void 0 ? void 0 : _b.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        _this.onNewData();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    this.currentObservable.query && this.currentObservable.query.resetQueryStoreErrors();\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n    var _a = this.previousData.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function onNewData() {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };","map":{"version":3,"sources":["../src/data/OperationData.ts","../src/data/QueryData.ts","../src/utils/useDeepMemo.ts","../src/utils/useBaseQuery.ts","../src/useQuery.ts","../src/useLazyQuery.ts","../src/data/MutationData.ts","../src/useMutation.ts","../src/data/SubscriptionData.ts","../src/useSubscription.ts","../src/useApolloClient.ts","../src/ssr/RenderPromises.ts"],"names":["isEqual"],"mappings":"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","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { LazyQueryHookOptions, QueryTuple } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { getApolloContext } from '@apollo/react-common';\nimport ApolloClient from 'apollo-client';\n\nexport function useApolloClient(): ApolloClient<object> {\n  const { client } = React.useContext(getApolloContext());\n  invariant(\n    client,\n    'No Apollo Client instance can be found. Please ensure that you ' +\n      'have called `ApolloProvider` higher up in your tree.'\n  );\n  return client!;\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}