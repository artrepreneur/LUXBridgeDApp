{"ast":null,"code":"import { normalizeValues } from './utils';\nvar thicknessPad = {\n  xlarge: 'large',\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n  xsmall: 'xxsmall'\n};\nexport var round = function round(value, decimals) {\n  return Number(Math.round(value + \"e\" + decimals) + \"e-\" + decimals);\n};\n\nvar alignMax = function alignMax(value, interval) {\n  if (value > 0) return value - value % interval + interval;\n  if (value < 0) return value + value % interval;\n  return value;\n};\n\nvar alignMin = function alignMin(value, interval) {\n  if (value > 0) return value - value % interval;\n  if (value < 0) return value - value % interval - interval;\n  return value;\n};\n\nexport var calcBounds = function calcBounds(values, options) {\n  if (options === void 0) {\n    options = {};\n  } // coarseness influences the rounding of the bounds, the smaller the\n  // number, the more the bounds will be rounded. e.g. 111 -> 110 -> 100\n  // Normalize to an array. Backwards compatible has no coarseness for x-axis\n\n\n  var coarseness = Array.isArray(options.coarseness) && options.coarseness || options.coarseness && [undefined, options.coarseness] || [undefined, 5]; // the number of steps is one less than the number of labels\n\n  var steps = options.steps || [1, 1];\n  var calcValues = normalizeValues(values || []); // min and max values\n\n  var minX;\n  var maxX;\n  var minY;\n  var maxY;\n\n  if (calcValues.length) {\n    // Calculate the max and min values.\n    calcValues.filter(function (value) {\n      return value !== undefined;\n    }).forEach(function (value) {\n      var x = value.value[0];\n\n      if (x !== undefined) {\n        minX = minX === undefined ? x : Math.min(minX, x);\n        maxX = maxX === undefined ? x : Math.max(maxX, x);\n      }\n\n      var y = value.value[1];\n\n      if (y !== undefined) {\n        minY = minY === undefined ? y : Math.min(minY, y);\n        maxY = maxY === undefined ? y : Math.max(maxY, y);\n      } // handle ranges of values\n\n\n      var y2 = value.value[2];\n\n      if (y2 !== undefined) {\n        minY = Math.min(minY, y2);\n        maxY = Math.max(maxY, y2);\n      }\n    }); // when max === min, offset them so we can show something\n\n    if (maxX === minX) {\n      if (maxX > 0) minX = maxX - 1;else maxX = minX + 1;\n    }\n\n    if (maxY === minY) {\n      if (maxY > 0) minY = maxY - 1;else maxY = minY + 1;\n    } // Calculate some reasonable bounds based on the max and min values.\n    // This is so values like 87342.12 don't end up being displayed as the\n    // graph axis labels.\n\n\n    var cX = coarseness[0],\n        cY = coarseness[1];\n\n    if (cX) {\n      var deltaX = maxX - minX;\n      var intervalX = Number.parseFloat((deltaX / cX).toPrecision(1));\n      minX = alignMin(minX, intervalX);\n      maxX = alignMax(maxX, intervalX);\n    }\n\n    if (cY) {\n      var deltaY = maxY - minY;\n      var intervalY = Number.parseFloat((deltaY / cY).toPrecision(1));\n      minY = alignMin(minY, intervalY);\n      maxY = alignMax(maxY, intervalY);\n    }\n\n    if (minY < 0 && maxY > 0 && Math.abs(minY) !== Math.abs(maxY)) {\n      // Adjust min and max when crossing 0 to ensure 0 will be shown on\n      // the Y axis based on the number of steps.\n      // const ratio = Math.abs(max) / Math.abs(min);\n      var stepInterval = (maxY - minY) / steps[1];\n      var minSteps = minY / stepInterval;\n      var maxSteps = maxY / stepInterval;\n\n      if (Math.abs(minSteps) < Math.abs(maxSteps)) {\n        stepInterval = maxY / Math.floor(maxSteps);\n        maxY = stepInterval * Math.floor(maxSteps);\n        minY = stepInterval * Math.floor(minSteps);\n      } else {\n        stepInterval = Math.abs(minY / Math.ceil(minSteps));\n        minY = stepInterval * Math.ceil(minSteps);\n        maxY = stepInterval * Math.ceil(maxSteps);\n      }\n    }\n  }\n\n  var bounds;\n  if (calcValues.length) bounds = [[minX, maxX], [minY, maxY]];else bounds = [[], []];\n  return bounds;\n};\nexport var calcs = function calcs(values, options) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  } // the number of steps is one less than the number of labels\n\n\n  var steps = options.steps || [1, 1];\n  var bounds = options.bounds || calcBounds(values, options);\n  if (options.min !== undefined) bounds[1][0] = options.min;\n  if (options.max !== undefined) bounds[1][1] = options.max;\n  var dimensions = [round(bounds[0][1] - bounds[0][0], 2), round(bounds[1][1] - bounds[1][0], 2)]; // Calculate x and y axis values across the specfied number of steps.\n\n  var yAxis = [];\n  var y = bounds[1][1]; // To deal with javascript math limitations, round the step with 4 decimal\n  // places and then push the values with 2 decimal places\n\n  var yStepInterval = round(dimensions[1] / steps[1], 4);\n\n  while (round(y, 2) >= bounds[1][0]) {\n    yAxis.push(round(y, 2));\n    y -= yStepInterval;\n  }\n\n  var xAxis = [];\n  var x = bounds[0][0];\n  var xStepInterval = round(dimensions[0] / steps[0], 4);\n\n  while (round(x, 2) <= bounds[0][1]) {\n    xAxis.push(round(x, 2));\n    x += xStepInterval;\n  }\n\n  var _options = options,\n      thickness = _options.thickness;\n\n  if (!thickness) {\n    // Set bar thickness based on number of values being rendered.\n    // Someday, it would be better to include the actual rendered size.\n    // These values were emirically determined, trying to balance visibility\n    // and overlap across resolutions.\n    if (values.length < 5) {\n      thickness = 'xlarge';\n    } else if (values.length < 11) {\n      thickness = 'large';\n    } else if (values.length < 21) {\n      thickness = 'medium';\n    } else if (values.length < 61) {\n      thickness = 'small';\n    } else if (values.length < 121) {\n      thickness = 'xsmall';\n    } else {\n      thickness = 'hair';\n    }\n  }\n\n  var pad = thicknessPad[thickness];\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions,\n    pad: pad,\n    thickness: thickness\n  };\n};","map":{"version":3,"names":["normalizeValues","thicknessPad","xlarge","large","medium","small","xsmall","round","value","decimals","Number","Math","alignMax","interval","alignMin","calcBounds","values","options","coarseness","Array","isArray","undefined","steps","calcValues","minX","maxX","minY","maxY","length","filter","forEach","x","min","max","y","y2","cX","cY","deltaX","intervalX","parseFloat","toPrecision","deltaY","intervalY","abs","stepInterval","minSteps","maxSteps","floor","ceil","bounds","calcs","dimensions","yAxis","yStepInterval","push","xAxis","xStepInterval","_options","thickness","pad","axis"],"sources":["/Library/WebServer/Documents/MachineLearning/trading/PKT-CASH/LUX/ODApp/packages/react-app/node_modules/grommet/es6/components/Chart/calcs.js"],"sourcesContent":["import { normalizeValues } from './utils';\nvar thicknessPad = {\n  xlarge: 'large',\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n  xsmall: 'xxsmall'\n};\nexport var round = function round(value, decimals) {\n  return Number(Math.round(value + \"e\" + decimals) + \"e-\" + decimals);\n};\n\nvar alignMax = function alignMax(value, interval) {\n  if (value > 0) return value - value % interval + interval;\n  if (value < 0) return value + value % interval;\n  return value;\n};\n\nvar alignMin = function alignMin(value, interval) {\n  if (value > 0) return value - value % interval;\n  if (value < 0) return value - value % interval - interval;\n  return value;\n};\n\nexport var calcBounds = function calcBounds(values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  // coarseness influences the rounding of the bounds, the smaller the\n  // number, the more the bounds will be rounded. e.g. 111 -> 110 -> 100\n  // Normalize to an array. Backwards compatible has no coarseness for x-axis\n  var coarseness = Array.isArray(options.coarseness) && options.coarseness || options.coarseness && [undefined, options.coarseness] || [undefined, 5]; // the number of steps is one less than the number of labels\n\n  var steps = options.steps || [1, 1];\n  var calcValues = normalizeValues(values || []); // min and max values\n\n  var minX;\n  var maxX;\n  var minY;\n  var maxY;\n\n  if (calcValues.length) {\n    // Calculate the max and min values.\n    calcValues.filter(function (value) {\n      return value !== undefined;\n    }).forEach(function (value) {\n      var x = value.value[0];\n\n      if (x !== undefined) {\n        minX = minX === undefined ? x : Math.min(minX, x);\n        maxX = maxX === undefined ? x : Math.max(maxX, x);\n      }\n\n      var y = value.value[1];\n\n      if (y !== undefined) {\n        minY = minY === undefined ? y : Math.min(minY, y);\n        maxY = maxY === undefined ? y : Math.max(maxY, y);\n      } // handle ranges of values\n\n\n      var y2 = value.value[2];\n\n      if (y2 !== undefined) {\n        minY = Math.min(minY, y2);\n        maxY = Math.max(maxY, y2);\n      }\n    }); // when max === min, offset them so we can show something\n\n    if (maxX === minX) {\n      if (maxX > 0) minX = maxX - 1;else maxX = minX + 1;\n    }\n\n    if (maxY === minY) {\n      if (maxY > 0) minY = maxY - 1;else maxY = minY + 1;\n    } // Calculate some reasonable bounds based on the max and min values.\n    // This is so values like 87342.12 don't end up being displayed as the\n    // graph axis labels.\n\n\n    var cX = coarseness[0],\n        cY = coarseness[1];\n\n    if (cX) {\n      var deltaX = maxX - minX;\n      var intervalX = Number.parseFloat((deltaX / cX).toPrecision(1));\n      minX = alignMin(minX, intervalX);\n      maxX = alignMax(maxX, intervalX);\n    }\n\n    if (cY) {\n      var deltaY = maxY - minY;\n      var intervalY = Number.parseFloat((deltaY / cY).toPrecision(1));\n      minY = alignMin(minY, intervalY);\n      maxY = alignMax(maxY, intervalY);\n    }\n\n    if (minY < 0 && maxY > 0 && Math.abs(minY) !== Math.abs(maxY)) {\n      // Adjust min and max when crossing 0 to ensure 0 will be shown on\n      // the Y axis based on the number of steps.\n      // const ratio = Math.abs(max) / Math.abs(min);\n      var stepInterval = (maxY - minY) / steps[1];\n      var minSteps = minY / stepInterval;\n      var maxSteps = maxY / stepInterval;\n\n      if (Math.abs(minSteps) < Math.abs(maxSteps)) {\n        stepInterval = maxY / Math.floor(maxSteps);\n        maxY = stepInterval * Math.floor(maxSteps);\n        minY = stepInterval * Math.floor(minSteps);\n      } else {\n        stepInterval = Math.abs(minY / Math.ceil(minSteps));\n        minY = stepInterval * Math.ceil(minSteps);\n        maxY = stepInterval * Math.ceil(maxSteps);\n      }\n    }\n  }\n\n  var bounds;\n  if (calcValues.length) bounds = [[minX, maxX], [minY, maxY]];else bounds = [[], []];\n  return bounds;\n};\nexport var calcs = function calcs(values, options) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  // the number of steps is one less than the number of labels\n  var steps = options.steps || [1, 1];\n  var bounds = options.bounds || calcBounds(values, options);\n  if (options.min !== undefined) bounds[1][0] = options.min;\n  if (options.max !== undefined) bounds[1][1] = options.max;\n  var dimensions = [round(bounds[0][1] - bounds[0][0], 2), round(bounds[1][1] - bounds[1][0], 2)]; // Calculate x and y axis values across the specfied number of steps.\n\n  var yAxis = [];\n  var y = bounds[1][1]; // To deal with javascript math limitations, round the step with 4 decimal\n  // places and then push the values with 2 decimal places\n\n  var yStepInterval = round(dimensions[1] / steps[1], 4);\n\n  while (round(y, 2) >= bounds[1][0]) {\n    yAxis.push(round(y, 2));\n    y -= yStepInterval;\n  }\n\n  var xAxis = [];\n  var x = bounds[0][0];\n  var xStepInterval = round(dimensions[0] / steps[0], 4);\n\n  while (round(x, 2) <= bounds[0][1]) {\n    xAxis.push(round(x, 2));\n    x += xStepInterval;\n  }\n\n  var _options = options,\n      thickness = _options.thickness;\n\n  if (!thickness) {\n    // Set bar thickness based on number of values being rendered.\n    // Someday, it would be better to include the actual rendered size.\n    // These values were emirically determined, trying to balance visibility\n    // and overlap across resolutions.\n    if (values.length < 5) {\n      thickness = 'xlarge';\n    } else if (values.length < 11) {\n      thickness = 'large';\n    } else if (values.length < 21) {\n      thickness = 'medium';\n    } else if (values.length < 61) {\n      thickness = 'small';\n    } else if (values.length < 121) {\n      thickness = 'xsmall';\n    } else {\n      thickness = 'hair';\n    }\n  }\n\n  var pad = thicknessPad[thickness];\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions,\n    pad: pad,\n    thickness: thickness\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}